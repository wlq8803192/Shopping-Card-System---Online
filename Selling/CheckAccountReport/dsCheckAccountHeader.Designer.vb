'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:2.0.50727.3623
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsCheckAccountHeader"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsCheckAccountHeader
    Inherits Global.System.Data.DataSet
    
    Private tabledtCheckAccountHeader As dtCheckAccountHeaderDataTable
    
    Private tabledtCheckAccountDetails As dtCheckAccountDetailsDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dtCheckAccountHeader")) Is Nothing) Then
                MyBase.Tables.Add(New dtCheckAccountHeaderDataTable(ds.Tables("dtCheckAccountHeader")))
            End If
            If (Not (ds.Tables("dtCheckAccountDetails")) Is Nothing) Then
                MyBase.Tables.Add(New dtCheckAccountDetailsDataTable(ds.Tables("dtCheckAccountDetails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtCheckAccountHeader() As dtCheckAccountHeaderDataTable
        Get
            Return Me.tabledtCheckAccountHeader
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtCheckAccountDetails() As dtCheckAccountDetailsDataTable
        Get
            Return Me.tabledtCheckAccountDetails
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsCheckAccountHeader = CType(MyBase.Clone,dsCheckAccountHeader)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dtCheckAccountHeader")) Is Nothing) Then
                MyBase.Tables.Add(New dtCheckAccountHeaderDataTable(ds.Tables("dtCheckAccountHeader")))
            End If
            If (Not (ds.Tables("dtCheckAccountDetails")) Is Nothing) Then
                MyBase.Tables.Add(New dtCheckAccountDetailsDataTable(ds.Tables("dtCheckAccountDetails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledtCheckAccountHeader = CType(MyBase.Tables("dtCheckAccountHeader"),dtCheckAccountHeaderDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtCheckAccountHeader) Is Nothing) Then
                Me.tabledtCheckAccountHeader.InitVars
            End If
        End If
        Me.tabledtCheckAccountDetails = CType(MyBase.Tables("dtCheckAccountDetails"),dtCheckAccountDetailsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtCheckAccountDetails) Is Nothing) Then
                Me.tabledtCheckAccountDetails.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsCheckAccountHeader"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsCheckAccountHeader.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledtCheckAccountHeader = New dtCheckAccountHeaderDataTable
        MyBase.Tables.Add(Me.tabledtCheckAccountHeader)
        Me.tabledtCheckAccountDetails = New dtCheckAccountDetailsDataTable
        MyBase.Tables.Add(Me.tabledtCheckAccountDetails)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtCheckAccountHeader() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtCheckAccountDetails() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsCheckAccountHeader = New dsCheckAccountHeader
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dtCheckAccountHeaderRowChangeEventHandler(ByVal sender As Object, ByVal e As dtCheckAccountHeaderRowChangeEvent)
    
    Public Delegate Sub dtCheckAccountDetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As dtCheckAccountDetailsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtCheckAccountHeaderDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnStoreName As Global.System.Data.DataColumn
        
        Private columnInsidSalesmanName As Global.System.Data.DataColumn
        
        Private columnSalesDate As Global.System.Data.DataColumn
        
        Private columnSalesPeriod As Global.System.Data.DataColumn
        
        Private columnSalesBillCount As Global.System.Data.DataColumn
        
        Private columnCardQTY As Global.System.Data.DataColumn
        
        Private columnChargedAMT As Global.System.Data.DataColumn
        
        Private columnPaymentAMT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtCheckAccountHeader"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StoreNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStoreName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InsidSalesmanNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInsidSalesmanName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalesDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalesDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalesPeriodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalesPeriod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalesBillCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalesBillCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardQTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChargedAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChargedAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtCheckAccountHeaderRow
            Get
                Return CType(Me.Rows(index),dtCheckAccountHeaderRow)
            End Get
        End Property
        
        Public Event dtCheckAccountHeaderRowChanging As dtCheckAccountHeaderRowChangeEventHandler
        
        Public Event dtCheckAccountHeaderRowChanged As dtCheckAccountHeaderRowChangeEventHandler
        
        Public Event dtCheckAccountHeaderRowDeleting As dtCheckAccountHeaderRowChangeEventHandler
        
        Public Event dtCheckAccountHeaderRowDeleted As dtCheckAccountHeaderRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtCheckAccountHeaderRow(ByVal row As dtCheckAccountHeaderRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtCheckAccountHeaderRow(ByVal StoreName As String, ByVal InsidSalesmanName As String, ByVal SalesDate As String, ByVal SalesPeriod As String, ByVal SalesBillCount As String, ByVal CardQTY As String, ByVal ChargedAMT As String, ByVal PaymentAMT As String) As dtCheckAccountHeaderRow
            Dim rowdtCheckAccountHeaderRow As dtCheckAccountHeaderRow = CType(Me.NewRow,dtCheckAccountHeaderRow)
            Dim columnValuesArray() As Object = New Object() {StoreName, InsidSalesmanName, SalesDate, SalesPeriod, SalesBillCount, CardQTY, ChargedAMT, PaymentAMT}
            rowdtCheckAccountHeaderRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtCheckAccountHeaderRow)
            Return rowdtCheckAccountHeaderRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtCheckAccountHeaderDataTable = CType(MyBase.Clone,dtCheckAccountHeaderDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtCheckAccountHeaderDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStoreName = MyBase.Columns("StoreName")
            Me.columnInsidSalesmanName = MyBase.Columns("InsidSalesmanName")
            Me.columnSalesDate = MyBase.Columns("SalesDate")
            Me.columnSalesPeriod = MyBase.Columns("SalesPeriod")
            Me.columnSalesBillCount = MyBase.Columns("SalesBillCount")
            Me.columnCardQTY = MyBase.Columns("CardQTY")
            Me.columnChargedAMT = MyBase.Columns("ChargedAMT")
            Me.columnPaymentAMT = MyBase.Columns("PaymentAMT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStoreName = New Global.System.Data.DataColumn("StoreName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStoreName)
            Me.columnInsidSalesmanName = New Global.System.Data.DataColumn("InsidSalesmanName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInsidSalesmanName)
            Me.columnSalesDate = New Global.System.Data.DataColumn("SalesDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalesDate)
            Me.columnSalesPeriod = New Global.System.Data.DataColumn("SalesPeriod", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalesPeriod)
            Me.columnSalesBillCount = New Global.System.Data.DataColumn("SalesBillCount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalesBillCount)
            Me.columnCardQTY = New Global.System.Data.DataColumn("CardQTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardQTY)
            Me.columnChargedAMT = New Global.System.Data.DataColumn("ChargedAMT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChargedAMT)
            Me.columnPaymentAMT = New Global.System.Data.DataColumn("PaymentAMT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentAMT)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtCheckAccountHeaderRow() As dtCheckAccountHeaderRow
            Return CType(Me.NewRow,dtCheckAccountHeaderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtCheckAccountHeaderRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtCheckAccountHeaderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtCheckAccountHeaderRowChangedEvent) Is Nothing) Then
                RaiseEvent dtCheckAccountHeaderRowChanged(Me, New dtCheckAccountHeaderRowChangeEvent(CType(e.Row,dtCheckAccountHeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtCheckAccountHeaderRowChangingEvent) Is Nothing) Then
                RaiseEvent dtCheckAccountHeaderRowChanging(Me, New dtCheckAccountHeaderRowChangeEvent(CType(e.Row,dtCheckAccountHeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtCheckAccountHeaderRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtCheckAccountHeaderRowDeleted(Me, New dtCheckAccountHeaderRowChangeEvent(CType(e.Row,dtCheckAccountHeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtCheckAccountHeaderRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtCheckAccountHeaderRowDeleting(Me, New dtCheckAccountHeaderRowChangeEvent(CType(e.Row,dtCheckAccountHeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtCheckAccountHeaderRow(ByVal row As dtCheckAccountHeaderRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCheckAccountHeader = New dsCheckAccountHeader
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtCheckAccountHeaderDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtCheckAccountDetailsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSalesBillType As Global.System.Data.DataColumn
        
        Private columnSalesBillCode As Global.System.Data.DataColumn
        
        Private columnCustomerName As Global.System.Data.DataColumn
        
        Private columnStartCardNo As Global.System.Data.DataColumn
        
        Private columnEndCardNo As Global.System.Data.DataColumn
        
        Private columnCardQTY As Global.System.Data.DataColumn
        
        Private columnFaceValue As Global.System.Data.DataColumn
        
        Private columnRowChargedAMT As Global.System.Data.DataColumn
        
        Private columnRowPayableAMT As Global.System.Data.DataColumn
        
        Private columnPaymentTermName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtCheckAccountDetails"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalesBillTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalesBillType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalesBillCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalesBillCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StartCardNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartCardNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndCardNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndCardNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardQTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaceValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaceValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowChargedAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowChargedAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowPayableAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowPayableAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentTermNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentTermName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtCheckAccountDetailsRow
            Get
                Return CType(Me.Rows(index),dtCheckAccountDetailsRow)
            End Get
        End Property
        
        Public Event dtCheckAccountDetailsRowChanging As dtCheckAccountDetailsRowChangeEventHandler
        
        Public Event dtCheckAccountDetailsRowChanged As dtCheckAccountDetailsRowChangeEventHandler
        
        Public Event dtCheckAccountDetailsRowDeleting As dtCheckAccountDetailsRowChangeEventHandler
        
        Public Event dtCheckAccountDetailsRowDeleted As dtCheckAccountDetailsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtCheckAccountDetailsRow(ByVal row As dtCheckAccountDetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtCheckAccountDetailsRow(ByVal SalesBillType As String, ByVal SalesBillCode As String, ByVal CustomerName As String, ByVal StartCardNo As String, ByVal EndCardNo As String, ByVal CardQTY As Integer, ByVal FaceValue As Decimal, ByVal RowChargedAMT As Decimal, ByVal RowPayableAMT As Decimal, ByVal PaymentTermName As String) As dtCheckAccountDetailsRow
            Dim rowdtCheckAccountDetailsRow As dtCheckAccountDetailsRow = CType(Me.NewRow,dtCheckAccountDetailsRow)
            Dim columnValuesArray() As Object = New Object() {SalesBillType, SalesBillCode, CustomerName, StartCardNo, EndCardNo, CardQTY, FaceValue, RowChargedAMT, RowPayableAMT, PaymentTermName}
            rowdtCheckAccountDetailsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtCheckAccountDetailsRow)
            Return rowdtCheckAccountDetailsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtCheckAccountDetailsDataTable = CType(MyBase.Clone,dtCheckAccountDetailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtCheckAccountDetailsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSalesBillType = MyBase.Columns("SalesBillType")
            Me.columnSalesBillCode = MyBase.Columns("SalesBillCode")
            Me.columnCustomerName = MyBase.Columns("CustomerName")
            Me.columnStartCardNo = MyBase.Columns("StartCardNo")
            Me.columnEndCardNo = MyBase.Columns("EndCardNo")
            Me.columnCardQTY = MyBase.Columns("CardQTY")
            Me.columnFaceValue = MyBase.Columns("FaceValue")
            Me.columnRowChargedAMT = MyBase.Columns("RowChargedAMT")
            Me.columnRowPayableAMT = MyBase.Columns("RowPayableAMT")
            Me.columnPaymentTermName = MyBase.Columns("PaymentTermName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSalesBillType = New Global.System.Data.DataColumn("SalesBillType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalesBillType)
            Me.columnSalesBillCode = New Global.System.Data.DataColumn("SalesBillCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalesBillCode)
            Me.columnCustomerName = New Global.System.Data.DataColumn("CustomerName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerName)
            Me.columnStartCardNo = New Global.System.Data.DataColumn("StartCardNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartCardNo)
            Me.columnEndCardNo = New Global.System.Data.DataColumn("EndCardNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndCardNo)
            Me.columnCardQTY = New Global.System.Data.DataColumn("CardQTY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardQTY)
            Me.columnFaceValue = New Global.System.Data.DataColumn("FaceValue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaceValue)
            Me.columnRowChargedAMT = New Global.System.Data.DataColumn("RowChargedAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowChargedAMT)
            Me.columnRowPayableAMT = New Global.System.Data.DataColumn("RowPayableAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowPayableAMT)
            Me.columnPaymentTermName = New Global.System.Data.DataColumn("PaymentTermName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentTermName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtCheckAccountDetailsRow() As dtCheckAccountDetailsRow
            Return CType(Me.NewRow,dtCheckAccountDetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtCheckAccountDetailsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtCheckAccountDetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtCheckAccountDetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent dtCheckAccountDetailsRowChanged(Me, New dtCheckAccountDetailsRowChangeEvent(CType(e.Row,dtCheckAccountDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtCheckAccountDetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent dtCheckAccountDetailsRowChanging(Me, New dtCheckAccountDetailsRowChangeEvent(CType(e.Row,dtCheckAccountDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtCheckAccountDetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtCheckAccountDetailsRowDeleted(Me, New dtCheckAccountDetailsRowChangeEvent(CType(e.Row,dtCheckAccountDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtCheckAccountDetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtCheckAccountDetailsRowDeleting(Me, New dtCheckAccountDetailsRowChangeEvent(CType(e.Row,dtCheckAccountDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtCheckAccountDetailsRow(ByVal row As dtCheckAccountDetailsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCheckAccountHeader = New dsCheckAccountHeader
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtCheckAccountDetailsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtCheckAccountHeaderRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtCheckAccountHeader As dtCheckAccountHeaderDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtCheckAccountHeader = CType(Me.Table,dtCheckAccountHeaderDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StoreName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCheckAccountHeader.StoreNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““dtCheckAccountHeader””中列““StoreName””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCheckAccountHeader.StoreNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InsidSalesmanName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCheckAccountHeader.InsidSalesmanNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““dtCheckAccountHeader””中列““InsidSalesmanName””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCheckAccountHeader.InsidSalesmanNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalesDate() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCheckAccountHeader.SalesDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““dtCheckAccountHeader””中列““SalesDate””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCheckAccountHeader.SalesDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalesPeriod() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCheckAccountHeader.SalesPeriodColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““dtCheckAccountHeader””中列““SalesPeriod””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCheckAccountHeader.SalesPeriodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalesBillCount() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCheckAccountHeader.SalesBillCountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““dtCheckAccountHeader””中列““SalesBillCount””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCheckAccountHeader.SalesBillCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardQTY() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCheckAccountHeader.CardQTYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““dtCheckAccountHeader””中列““CardQTY””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCheckAccountHeader.CardQTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChargedAMT() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCheckAccountHeader.ChargedAMTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““dtCheckAccountHeader””中列““ChargedAMT””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCheckAccountHeader.ChargedAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentAMT() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCheckAccountHeader.PaymentAMTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““dtCheckAccountHeader””中列““PaymentAMT””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCheckAccountHeader.PaymentAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStoreNameNull() As Boolean
            Return Me.IsNull(Me.tabledtCheckAccountHeader.StoreNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStoreNameNull()
            Me(Me.tabledtCheckAccountHeader.StoreNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInsidSalesmanNameNull() As Boolean
            Return Me.IsNull(Me.tabledtCheckAccountHeader.InsidSalesmanNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInsidSalesmanNameNull()
            Me(Me.tabledtCheckAccountHeader.InsidSalesmanNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalesDateNull() As Boolean
            Return Me.IsNull(Me.tabledtCheckAccountHeader.SalesDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalesDateNull()
            Me(Me.tabledtCheckAccountHeader.SalesDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalesPeriodNull() As Boolean
            Return Me.IsNull(Me.tabledtCheckAccountHeader.SalesPeriodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalesPeriodNull()
            Me(Me.tabledtCheckAccountHeader.SalesPeriodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalesBillCountNull() As Boolean
            Return Me.IsNull(Me.tabledtCheckAccountHeader.SalesBillCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalesBillCountNull()
            Me(Me.tabledtCheckAccountHeader.SalesBillCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardQTYNull() As Boolean
            Return Me.IsNull(Me.tabledtCheckAccountHeader.CardQTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardQTYNull()
            Me(Me.tabledtCheckAccountHeader.CardQTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChargedAMTNull() As Boolean
            Return Me.IsNull(Me.tabledtCheckAccountHeader.ChargedAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChargedAMTNull()
            Me(Me.tabledtCheckAccountHeader.ChargedAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentAMTNull() As Boolean
            Return Me.IsNull(Me.tabledtCheckAccountHeader.PaymentAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentAMTNull()
            Me(Me.tabledtCheckAccountHeader.PaymentAMTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtCheckAccountDetailsRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtCheckAccountDetails As dtCheckAccountDetailsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtCheckAccountDetails = CType(Me.Table,dtCheckAccountDetailsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalesBillType() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCheckAccountDetails.SalesBillTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““dtCheckAccountDetails””中列““SalesBillType””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCheckAccountDetails.SalesBillTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalesBillCode() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCheckAccountDetails.SalesBillCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““dtCheckAccountDetails””中列““SalesBillCode””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCheckAccountDetails.SalesBillCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomerName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCheckAccountDetails.CustomerNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““dtCheckAccountDetails””中列““CustomerName””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCheckAccountDetails.CustomerNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StartCardNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCheckAccountDetails.StartCardNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““dtCheckAccountDetails””中列““StartCardNo””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCheckAccountDetails.StartCardNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EndCardNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCheckAccountDetails.EndCardNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““dtCheckAccountDetails””中列““EndCardNo””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCheckAccountDetails.EndCardNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardQTY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtCheckAccountDetails.CardQTYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““dtCheckAccountDetails””中列““CardQTY””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCheckAccountDetails.CardQTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FaceValue() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtCheckAccountDetails.FaceValueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““dtCheckAccountDetails””中列““FaceValue””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCheckAccountDetails.FaceValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowChargedAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtCheckAccountDetails.RowChargedAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““dtCheckAccountDetails””中列““RowChargedAMT””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCheckAccountDetails.RowChargedAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowPayableAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtCheckAccountDetails.RowPayableAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““dtCheckAccountDetails””中列““RowPayableAMT””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCheckAccountDetails.RowPayableAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentTermName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCheckAccountDetails.PaymentTermNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““dtCheckAccountDetails””中列““PaymentTermName””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCheckAccountDetails.PaymentTermNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalesBillTypeNull() As Boolean
            Return Me.IsNull(Me.tabledtCheckAccountDetails.SalesBillTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalesBillTypeNull()
            Me(Me.tabledtCheckAccountDetails.SalesBillTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalesBillCodeNull() As Boolean
            Return Me.IsNull(Me.tabledtCheckAccountDetails.SalesBillCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalesBillCodeNull()
            Me(Me.tabledtCheckAccountDetails.SalesBillCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerNameNull() As Boolean
            Return Me.IsNull(Me.tabledtCheckAccountDetails.CustomerNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerNameNull()
            Me(Me.tabledtCheckAccountDetails.CustomerNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStartCardNoNull() As Boolean
            Return Me.IsNull(Me.tabledtCheckAccountDetails.StartCardNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStartCardNoNull()
            Me(Me.tabledtCheckAccountDetails.StartCardNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEndCardNoNull() As Boolean
            Return Me.IsNull(Me.tabledtCheckAccountDetails.EndCardNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEndCardNoNull()
            Me(Me.tabledtCheckAccountDetails.EndCardNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardQTYNull() As Boolean
            Return Me.IsNull(Me.tabledtCheckAccountDetails.CardQTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardQTYNull()
            Me(Me.tabledtCheckAccountDetails.CardQTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaceValueNull() As Boolean
            Return Me.IsNull(Me.tabledtCheckAccountDetails.FaceValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaceValueNull()
            Me(Me.tabledtCheckAccountDetails.FaceValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowChargedAMTNull() As Boolean
            Return Me.IsNull(Me.tabledtCheckAccountDetails.RowChargedAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowChargedAMTNull()
            Me(Me.tabledtCheckAccountDetails.RowChargedAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowPayableAMTNull() As Boolean
            Return Me.IsNull(Me.tabledtCheckAccountDetails.RowPayableAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowPayableAMTNull()
            Me(Me.tabledtCheckAccountDetails.RowPayableAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentTermNameNull() As Boolean
            Return Me.IsNull(Me.tabledtCheckAccountDetails.PaymentTermNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentTermNameNull()
            Me(Me.tabledtCheckAccountDetails.PaymentTermNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtCheckAccountHeaderRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtCheckAccountHeaderRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtCheckAccountHeaderRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtCheckAccountHeaderRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtCheckAccountDetailsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtCheckAccountDetailsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtCheckAccountDetailsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtCheckAccountDetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
